hydra ingest notes (ERJ 6/4/13) (revised 7/17/13)

--------------
Publish routine for a project:
1) remove from hydra_publish, hydra_publish_path anything that will be republished
  delete from hydra_publish_path where hpid in (select hpid from hydra_publish where pid = 27)
  delete from hydra_publish where pid = 27
2) insert into hydra and check progress using date
  insert into hydra (oid) select oid from object where pid = 27
  select * from hydra where date >= '2013-06-20 00:00:00.000'
3) check hydra_publish and hydra_publish path for 1
4) copy some to pamoja_hydra (only for seeding the pamoja_hydra db, ignore if just using prod pamoja 
-- populates the _publish table by OID list
insert into pamoja_hydra.dbo.hydra_publish (hpid,hcmid,date,cid,pid,oid,_oid,zindex,_boid,_bindex,[action],dateready)
select hpid,hcmid,date,cid,pid,oid,_oid,zindex,_boid,_bindex,[action],dateready from pamoja.dbo.hydra_publish where hpid not in (select hpid from pamoja_hydra.dbo.hydra_publish) and (oid in (0,0) or _oid in (0,0))

-- populates the _path table by OID list
insert into pamoja_hydra.dbo.hydra_publish_path (hppid,hpid,type,pathhttp,pathunc,md5,sha256,controlgroup,mimetype,dsid,ingestmethod,altids,dslabel,versionable,dsstate,logmessage,oidpointer)
select a.hppid,a.hpid,a.type,a.pathhttp,a.pathunc,a.md5,a.sha256,a.controlgroup,a.mimetype,a.dsid,a.ingestmethod,a.altids,a.dslabel,a.versionable,a.dsstate,a.logmessage,a.oidpointer from pamoja.dbo.hydra_publish_path a
inner join pamoja.dbo.hydra_publish b on a.hpid = b.hpid
where a.hppid not in (select hppid from pamoja_hydra.dbo.hydra_publish_path) and (b.oid in (0,0) or b._oid in (0,0))

Alternatively, you can populate by project, in this example for PID 2. 

-- populates the _publish table by PID
insert into pamoja_hydra.dbo.hydra_publish (hpid,hcmid,date,cid,pid,oid,_oid,zindex,_boid,_bindex,[action],dateready)
select hpid,hcmid,date,cid,pid,oid,_oid,zindex,_boid,_bindex,[action],dateready from pamoja.dbo.hydra_publish where hpid not in (select hpid from pamoja_hydra.dbo.hydra_publish) and pid = 2
5) reset a set of hydra_publish rows to do a test reingest:
   update hydra_publish set hydraID='',dateHydraStart=null,dateHydraEnd=null where <add constraint here>
-------------
ingest routine:

1) check that hydra configs are set properly
  config/solr.yml
  config/fedora.yml
2) check that lib/tasks/yulhy6.rake is set properly
  for prod db:
  YAML.load_file(config/ladybird.yml)
  for testdb:
  YAML.load_file ('config/ladybird_pamoja_test.yml')
2a) check that loop stopper and end of processoids() is at a sufficiently high number to ingest everything
  if @cnt == 10000000
    ... 
b) check mount is there and tempfile (libserver3 example, may be different paths in production):  
  @mountroot = "/home/ermadmix/libshare/"
  @tempdir = "/home/ermadmix/"
3) diskfree -   check df on server to ingest to (dev,test (libserver7),prod (diego)  
4) check for eligible oids 

select a.hpid,a.oid,a.cid,a.pid,b.contentModel,a._oid,a.action,a.hydraID,a.zindex
         from hydra_publish a, hydra_content_model b
         where a.dateHydraStart is null and a.dateReady is not null and a.priority <> 999 and a.attempts < 3
         and (server is null or server='#{@server}')
         and ((a.action='insert' and _oid=0) or (a.action='delete' or a.action='update' or a.action='ichild' or a.action='undel'))
         and a.hcmid=b.hcmid
      order by a.priority, a.attempts,
         case a.action 
         when 'delete' then 'a' 
                when 'undel' then 'b' 
                when 'update' then 'c' 
        when 'ichild' then 'd' 
        when 'insert' then 'e'
      end,a.dateReady

tweak this for more pointed queries
1) get all columns - "select a.*,b.contentModel..."
2) just get children remove _oid and add hcmid "... and ((a.action='insert') or (a.action='delete' or a.action='update' or a.action='ichild')) and hcmid=3"
3)or check ranges of obejct via hpidmost of the time this will be 'hpid > "somenumber"'

check data in tables, make sure looks OK
  select * from dbo.hydra_publish where hpid > somenumber
  select * from dbo.hydra_publish_path where hpid > somenumber
  or
  select * from dbo.hydra_publish where dateReady > '2013-09-24' (gets everything published after a certain day)


5)  adding collection objects (1 time only) or propagating ladybird changes to hydra dev/test/prods: 
  rake yulhy:add_all_collections_with_info
  RAILS_ENV=test rake yulhy:add_all_collections_with_info
  RAILS_ENV=production rake yulhy:add_all_collections_with_info
  
5.5) If working in batches you may want to start with fresh logs by renaming diggit-hydra/log, otherwise will roll 10 at a time naturally every 100MB 

6) run the actual ingest: 
  rake yulhy6:ingest &
  RAILS_ENV=test rake yulhy6:ingest &
  RAILS_ENV=production rake yulhy6:ingest &

6.5) or 24/7 ingest:
  change sleep time and RAILS_ENV in nonstop.sh and run:
  ./nonstop.sh & 

6a) most likely there will be limited batches that will be handled in a script that runs to completion, but if you want to keep it going constantly, run the script:
  while true
  do 
    RAILS_ENV=production rake yulhy6:ingest ^
    sleep 1m
  done 

6b) WARNING - too many error 20 per 1000 objects will stop the script to prevent error overflow, and give to to assess and restart 

7) check logs (diggit-hydra/log/ingest.log) file and sderr for successful ingests, failures, and possible errors

8) check database using hpids from step 1 and report
select a.hpid, b.contentmodel,a.pid,a.oid,a._oid,a.zindex,a.hydraID
from dbo.hydra_publish a,dbo.hydra_content_model b 
where a.hcmid=b.hcmid and a.hpid > <somenumber>

9) debug if necessary (the hard part)
a) check the rake output ('log/ingest.log')
 i) grep error ingest.log 
 ii) note the broken pipe exception are transient and may clear up in a second pass

b) if an exception occurs, check what it is, but most likely it will be an illegible stack trace
 i) see errors in database - select a.*,b.date from hydra_publish a,hydra_publish_error b where a.hpid=b.hpid order by b.date desc
c) look for the pid before an error
  ex: in yulhy6d.out libserver7t:713
d) cross reference with fedora.logs

[ermadmix@libserver7 logs]$ pwd
/usr/local/fedora/server/logs
[ermadmix@libserver7 logs]$ ls -la
total 114216
drwxrwxrwx+ 2 fedora fedora     4096 Jul  3 14:42 .
drwxrwxrwx+ 4 fedora fedora       42 Jul  2 10:23 ..
-rw-rw-rw-. 1 fedora fedora 11938904 Jul 17 14:10 fedora.log
-rw-rw-rw-. 1 fedora fedora 20998765 Jul  3 14:42 fedora.log.1
-rw-rw-rw-. 1 fedora fedora 20974982 Jul  3 12:51 fedora.log.2
-rw-rw-rw-. 1 fedora fedora 20994435 Jul  3 12:13 fedora.log.3
-rw-rw-rw-. 1 fedora fedora 21015846 Jul  3 11:44 fedora.log.4
-rw-rw-r--. 1 fedora fedora 20996434 Jul  3 11:18 fedora.log.5
[ermadmix@libserver7 logs]$ grep "libserver7t:713" .
[ermadmix@libserver7 logs]$ grep -n "libserver7t:713" ./*

use line number to find exception of next pid (libserver7t:714):
[ermadmix@libserver7 logs]$ more +64888 fedora.log.5

e) do same as (d) with catalina.out of fedora (if necessary)
  usr/local/fedora/tomcat/logs
  
f) do same as (d) and (e) with catalina.out of solr (if necessary)
  /usr/local/solr_tomcat/logs



10) delete any garbage objects
  rake yulhy:delete_fedora[namespace,start,end]
  
  ie for changeme:1 to changeme:5
  rake yulhy:delete_fedora[changeme,1,5]
  
  or for test instance for libserver7t:1 to libserver7t:5
  RAILS_ENV=test rake yulhy:delete_fedora[libserver7t,1,5]

